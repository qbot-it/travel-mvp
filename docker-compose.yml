version: "3.9"
services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend/:/usr/src/app/
      - backend_local:/usr/local
    working_dir: /usr/src/app
    ports:
      - "${BACKEND_HOST_PORT}:${BACKEND_PORT}"
    stdin_open: true
    depends_on:
      postgres:
        condition: service_healthy
    command:
      - /bin/sh
      - -c
      - |
        pip install --root-user-action=ignore --upgrade -r /usr/src/app/requirements.txt
        alembic upgrade head
        uvicorn app.main:app --host 0.0.0.0 --port ${BACKEND_PORT} --reload
    tty: true
    networks:
      - travel_network
    environment:
      - APP_ENV=${APP_ENV}
      - BACKEND_PORT=${BACKEND_PORT}
      - DB_HOST=${BACKEND_DB_HOST}
      - DB_USERNAME=${BACKEND_DB_USERNAME}
      - DB_PASSWORD=${BACKEND_DB_PASSWORD}
      - DB_DATABASE=${BACKEND_DB_DATABASE}
      - DB_PORT=${BACKEND_DB_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_TOKEN_TTL=${JWT_ACCESS_TOKEN_TTL}
      - JWT_REFRESH_TOKEN_TTL=${JWT_REFRESH_TOKEN_TTL}
      - ENCRYPTION_SECRET_KEY=${ENCRYPTION_SECRET_KEY}
      - GPT_MODEL=${GPT_MODEL}
      - AMADEUS_API_URL=${AMADEUS_API_URL}
      - AMADEUS_API_AUTH_URL=${AMADEUS_API_AUTH_URL}
      - AMADEUS_API_KEY=${AMADEUS_API_KEY}
      - AMADEUS_API_SECRET=${AMADEUS_API_SECRET}

  frontend:
    image: node:20.9-alpine3.17
    volumes:
      - ./frontend:/usr/src/app
    working_dir: /usr/src/app
    ports:
      - "${FRONTEND_HOST_PORT}:${FRONTEND_PORT}"
    depends_on:
      - backend
    stdin_open: true
    command:
      - /bin/sh
      - -c
      - |
        npm install
        npm run dev
    tty: true
    networks:
      - travel_network
    environment:
      - FRONTEND_BACKEND_ENDPOINT=${FRONTEND_BACKEND_ENDPOINT}

  postgres:
    image: postgres:16.0-alpine3.18
    environment:
      - POSTGRES_USER=${BACKEND_DB_USERNAME}
      - POSTGRES_PASSWORD=${BACKEND_DB_PASSWORD}
      - POSTGRES_DB=${BACKEND_DB_DATABASE}
    volumes:
      - travel_database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${BACKEND_DB_USERNAME} -d ${BACKEND_DB_DATABASE}'"]
      interval: 5s
      timeout: 10s
      retries: 30
      start_period: 10s
    networks:
      - travel_network
    ports:
      - "${BACKEND_DB_HOST_PORT}:${BACKEND_DB_PORT}"

  adminer:
    image: adminer
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - travel_network
    ports:
        - "${ADMINER_HOST_PORT}:${ADMINER_PORT}"

volumes:
  travel_database:
  backend_local:

networks:
  travel_network:
